{"ast":null,"code":"import _objectSpread from\"C:/Users/ntoam/Desktop/Projects/CrisisLink2.0/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{GoogleMap,LoadScript,Marker,InfoWindow,DirectionsRenderer,TrafficLayer,Circle,Polyline}from'@react-google-maps/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const mapContainerStyle={width:'100%',height:'400px',borderRadius:'12px',border:'2px solid #e5e7eb'};const defaultCenter={lat:-26.2041,// Johannesburg, South Africa\nlng:28.0473};// Google APIs to load\nconst libraries=['places','geometry','directions','visualization'];const mapOptions={disableDefaultUI:false,zoomControl:true,streetViewControl:false,mapTypeControl:true,fullscreenControl:true,trafficLayer:true,styles:[{featureType:'poi',elementType:'labels',stylers:[{visibility:'off'}]},{featureType:'road',elementType:'geometry',stylers:[{color:'#f5f5f5'}]},{featureType:'road.highway',elementType:'geometry',stylers:[{color:'#dadada'}]}]};const LiveTrackingMap=_ref=>{var _window$google,_window$google3,_directions$routes$,_directions$routes$$l,_directions$routes$$l2,_directions$routes$2,_directions$routes$2$,_directions$routes$2$2,_directions$routes$3,_directions$routes$3$,_directions$routes$3$2;let{userLocation,agentLocation,sosAlert,className='',showDirections=true,showTraffic=true,showGeofence=true,onMapLoad,onRouteUpdate,agents=[]}=_ref;const[map,setMap]=useState(null);const[directions,setDirections]=useState(null);const[alternativeRoutes,setAlternativeRoutes]=useState([]);const[selectedAgent,setSelectedAgent]=useState(null);const[isLoaded,setIsLoaded]=useState(false);const[trafficLayer,setTrafficLayer]=useState(null);const[routeHistory,setRouteHistory]=useState([]);const[weatherOverlay,setWeatherOverlay]=useState(null);const[emergencyRadius,setEmergencyRadius]=useState(100);// meters\n// Enhanced routing with multiple options and real-time updates\nconst calculateAdvancedRouting=useCallback(async(origin,destination)=>{if(!window.google||!origin||!destination)return null;const directionsService=new window.google.maps.DirectionsService();try{// Get multiple route options\nconst requests=[{origin:origin,destination:destination,travelMode:window.google.maps.TravelMode.DRIVING,drivingOptions:{departureTime:new Date(),trafficModel:window.google.maps.TrafficModel.BEST_GUESS},provideRouteAlternatives:true,avoidHighways:false,avoidTolls:false,optimizeWaypoints:true}];const results=await Promise.all(requests.map(request=>new Promise((resolve,reject)=>{directionsService.route(request,(result,status)=>{if(status==='OK'){resolve(result);}else{reject(new Error(\"Directions request failed: \".concat(status)));}});})));const mainResult=results[0];setDirections(mainResult);// Process all routes\nconst allRoutes=mainResult.routes.map((route,index)=>{const leg=route.legs[0];return{index,distance:leg.distance,duration:leg.duration,duration_in_traffic:leg.duration_in_traffic||leg.duration,start_address:leg.start_address,end_address:leg.end_address,steps:leg.steps,route:route};});// Select fastest route considering traffic\nconst fastestRoute=allRoutes.reduce((fastest,current)=>{var _fastest$duration_in_,_current$duration_in_;const fastestTime=((_fastest$duration_in_=fastest.duration_in_traffic)===null||_fastest$duration_in_===void 0?void 0:_fastest$duration_in_.value)||fastest.duration.value;const currentTime=((_current$duration_in_=current.duration_in_traffic)===null||_current$duration_in_===void 0?void 0:_current$duration_in_.value)||current.duration.value;return currentTime<fastestTime?current:fastest;});setAlternativeRoutes(allRoutes);// Get traffic conditions and update everything\nconst trafficData=await getTrafficConditions(origin,destination);// Update route history for pattern analysis\nsetRouteHistory(prev=>[...prev.slice(-10),{timestamp:new Date(),route:fastestRoute,traffic_conditions:trafficData}]);// Dispatch comprehensive route info\nif(onMapLoad){var _fastestRoute$duratio,_fastestRoute$duratio2;onMapLoad({distance:fastestRoute.distance.text,duration:fastestRoute.duration.text,duration_in_traffic:((_fastestRoute$duratio=fastestRoute.duration_in_traffic)===null||_fastestRoute$duratio===void 0?void 0:_fastestRoute$duratio.text)||fastestRoute.duration.text,eta:new Date(Date.now()+(((_fastestRoute$duratio2=fastestRoute.duration_in_traffic)===null||_fastestRoute$duratio2===void 0?void 0:_fastestRoute$duratio2.value)||fastestRoute.duration.value)*1000),alternative_routes:allRoutes.length,traffic_delay:fastestRoute.duration_in_traffic?(fastestRoute.duration_in_traffic.value-fastestRoute.duration.value)/60:0,route_quality:calculateRouteQuality(fastestRoute)});}if(onRouteUpdate){onRouteUpdate({main_route:fastestRoute,alternatives:allRoutes,traffic_data:trafficData});}}catch(error){console.error('Advanced routing error:',error);// Fallback to basic routing\ncalculateBasicETA(origin,destination);}},[onMapLoad,onRouteUpdate]);// Fallback basic routing\nconst calculateBasicETA=useCallback((origin,destination)=>{const directionsService=new window.google.maps.DirectionsService();directionsService.route({origin:origin,destination:destination,travelMode:window.google.maps.TravelMode.DRIVING},(result,status)=>{if(status==='OK'){setDirections(result);const route=result.routes[0];const leg=route.legs[0];if(onMapLoad){onMapLoad({distance:leg.distance.text,duration:leg.duration.text,eta:new Date(Date.now()+leg.duration.value*1000)});}}});},[onMapLoad]);// Get real-time traffic conditions\nconst getTrafficConditions=async(origin,destination)=>{try{const distanceService=new window.google.maps.DistanceMatrixService();return new Promise(resolve=>{distanceService.getDistanceMatrix({origins:[origin],destinations:[destination],travelMode:window.google.maps.TravelMode.DRIVING,drivingOptions:{departureTime:new Date(),trafficModel:window.google.maps.TrafficModel.BEST_GUESS},avoidHighways:false,avoidTolls:false},(response,status)=>{if(status==='OK'){var _response$rows$;const element=(_response$rows$=response.rows[0])===null||_response$rows$===void 0?void 0:_response$rows$.elements[0];if((element===null||element===void 0?void 0:element.status)==='OK'){resolve({distance:element.distance,duration:element.duration,duration_in_traffic:element.duration_in_traffic,traffic_delay_seconds:element.duration_in_traffic?element.duration_in_traffic.value-element.duration.value:0});}}resolve(null);});});}catch(error){console.error('Traffic conditions error:',error);return null;}};// Calculate route quality score\nconst calculateRouteQuality=route=>{let score=100;// Penalize for traffic delays\nif(route.duration_in_traffic&&route.duration){const delay=(route.duration_in_traffic.value-route.duration.value)/60;score-=Math.min(delay*2,30);// Max 30 point penalty\n}// Penalize for longer distances\nconst distance=route.distance.value/1000;// km\nif(distance>20)score-=(distance-20)*0.5;return Math.max(score,0);};// Update directions when locations change with real-time routing\nuseEffect(()=>{if(isLoaded&&userLocation&&agentLocation&&showDirections){calculateAdvancedRouting(agentLocation,userLocation);}},[userLocation,agentLocation,showDirections,isLoaded,calculateAdvancedRouting]);// Set up real-time route updates every 2 minutes\nuseEffect(()=>{if(isLoaded&&userLocation&&agentLocation&&showDirections){const routeUpdateInterval=setInterval(()=>{calculateAdvancedRouting(agentLocation,userLocation);},120000);// 2 minutes\nreturn()=>clearInterval(routeUpdateInterval);}},[userLocation,agentLocation,showDirections,isLoaded,calculateAdvancedRouting]);// Initialize traffic layer\nuseEffect(()=>{if(map&&showTraffic&&!trafficLayer){const traffic=new window.google.maps.TrafficLayer();traffic.setMap(map);setTrafficLayer(traffic);}return()=>{if(trafficLayer){trafficLayer.setMap(null);}};},[map,showTraffic,trafficLayer]);const onLoad=useCallback(map=>{setMap(map);setIsLoaded(true);// Fit bounds to show both user and agent\nif(userLocation&&agentLocation){const bounds=new window.google.maps.LatLngBounds();bounds.extend(userLocation);bounds.extend(agentLocation);map.fitBounds(bounds);}},[userLocation,agentLocation]);const onUnmount=useCallback(()=>{setMap(null);},[]);// Get marker icon based on agent status\nconst getAgentIcon=agent=>{const baseUrl='data:image/svg+xml;base64,';let color='#10b981';// green for available\nif(agent.status==='busy')color='#f59e0b';// amber\nif(agent.status==='offline')color='#6b7280';// gray\nif(agent.id===(sosAlert===null||sosAlert===void 0?void 0:sosAlert.assigned_agent_id))color='#ef4444';// red for assigned\nconst svg=\"\\n      <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\" fill=\\\"\".concat(color,\"\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\"/>\\n        <path d=\\\"M12 6v12M6 12h12\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\"/>\\n      </svg>\\n    \");return{url:baseUrl+btoa(svg),scaledSize:new window.google.maps.Size(32,32),anchor:new window.google.maps.Point(16,16)};};// User location icon (red SOS marker)\nconst userIcon={url:'data:image/svg+xml;base64,'+btoa(\"\\n      <svg width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <circle cx=\\\"16\\\" cy=\\\"16\\\" r=\\\"14\\\" fill=\\\"#ef4444\\\" stroke=\\\"white\\\" stroke-width=\\\"3\\\"/>\\n        <text x=\\\"16\\\" y=\\\"20\\\" text-anchor=\\\"middle\\\" fill=\\\"white\\\" font-size=\\\"12\\\" font-weight=\\\"bold\\\">SOS</text>\\n      </svg>\\n    \"),scaledSize:new window.google.maps.Size(32,32),anchor:new window.google.maps.Point(16,16)};return/*#__PURE__*/_jsxs(\"div\",{className:\"relative \".concat(className),children:[/*#__PURE__*/_jsx(LoadScript,{googleMapsApiKey:process.env.REACT_APP_GOOGLE_MAPS_API_KEY,libraries:libraries,children:/*#__PURE__*/_jsxs(GoogleMap,{mapContainerStyle:mapContainerStyle,zoom:13,center:userLocation||agentLocation||defaultCenter,options:mapOptions,onLoad:onLoad,onUnmount:onUnmount,children:[userLocation&&showGeofence&&/*#__PURE__*/_jsx(Circle,{center:userLocation,radius:emergencyRadius,options:{fillColor:'#ef4444',fillOpacity:0.1,strokeColor:'#ef4444',strokeOpacity:0.5,strokeWeight:2}}),userLocation&&/*#__PURE__*/_jsx(Marker,{position:userLocation,icon:userIcon,title:\"Your Location (SOS Alert)\",zIndex:1000,animation:(_window$google=window.google)===null||_window$google===void 0?void 0:_window$google.maps.Animation.DROP}),agents.map((agent,index)=>{var _window$google2;return/*#__PURE__*/_jsx(Marker,{position:{lat:parseFloat(agent.current_lat),lng:parseFloat(agent.current_lng)},icon:getAgentIcon(agent),title:\"Agent \".concat(agent.name,\" - \").concat(agent.status),onClick:()=>setSelectedAgent(agent),zIndex:agent.id===(sosAlert===null||sosAlert===void 0?void 0:sosAlert.assigned_agent_id)?999:100,animation:agent.id===(sosAlert===null||sosAlert===void 0?void 0:sosAlert.assigned_agent_id)?(_window$google2=window.google)===null||_window$google2===void 0?void 0:_window$google2.maps.Animation.BOUNCE:null},agent.id);}),routeHistory.length>1&&/*#__PURE__*/_jsx(Polyline,{path:routeHistory.map(entry=>{var _entry$route$start_lo,_entry$route$start_lo2;return{lat:((_entry$route$start_lo=entry.route.start_location)===null||_entry$route$start_lo===void 0?void 0:_entry$route$start_lo.lat)||(agentLocation===null||agentLocation===void 0?void 0:agentLocation.lat),lng:((_entry$route$start_lo2=entry.route.start_location)===null||_entry$route$start_lo2===void 0?void 0:_entry$route$start_lo2.lng)||(agentLocation===null||agentLocation===void 0?void 0:agentLocation.lng)};}).filter(point=>point.lat&&point.lng),options:{strokeColor:'#10b981',strokeOpacity:0.6,strokeWeight:2,icons:[{icon:{path:(_window$google3=window.google)===null||_window$google3===void 0?void 0:_window$google3.maps.SymbolPath.FORWARD_CLOSED_ARROW,scale:2,strokeColor:'#10b981'},offset:'100%'}]}}),selectedAgent&&/*#__PURE__*/_jsx(InfoWindow,{position:{lat:parseFloat(selectedAgent.current_lat),lng:parseFloat(selectedAgent.current_lng)},onCloseClick:()=>setSelectedAgent(null),children:/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 min-w-64\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between mb-2\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-bold text-sm\",children:[\"Agent \",selectedAgent.name]}),/*#__PURE__*/_jsx(\"span\",{className:\"px-2 py-1 rounded-full text-xs font-medium \".concat(selectedAgent.status==='available'?'bg-green-100 text-green-800':selectedAgent.status==='busy'?'bg-yellow-100 text-yellow-800':'bg-gray-100 text-gray-800'),children:selectedAgent.status})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-1 text-xs text-gray-600\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Badge:\"}),\" \",selectedAgent.badge_number]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Phone:\"}),\" \",selectedAgent.phone]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Vehicle:\"}),\" \",selectedAgent.vehicle_info||'Not specified']}),selectedAgent.id===(sosAlert===null||sosAlert===void 0?void 0:sosAlert.assigned_agent_id)&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2 p-2 bg-red-50 rounded border-l-4 border-red-400\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-red-700 font-bold text-xs\",children:\"\\uD83D\\uDEA8 Assigned to your SOS\"}),directions&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1 text-xs\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Distance: \",(_directions$routes$=directions.routes[0])===null||_directions$routes$===void 0?void 0:(_directions$routes$$l=_directions$routes$.legs[0])===null||_directions$routes$$l===void 0?void 0:(_directions$routes$$l2=_directions$routes$$l.distance)===null||_directions$routes$$l2===void 0?void 0:_directions$routes$$l2.text]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"ETA: \",((_directions$routes$2=directions.routes[0])===null||_directions$routes$2===void 0?void 0:(_directions$routes$2$=_directions$routes$2.legs[0])===null||_directions$routes$2$===void 0?void 0:(_directions$routes$2$2=_directions$routes$2$.duration_in_traffic)===null||_directions$routes$2$2===void 0?void 0:_directions$routes$2$2.text)||((_directions$routes$3=directions.routes[0])===null||_directions$routes$3===void 0?void 0:(_directions$routes$3$=_directions$routes$3.legs[0])===null||_directions$routes$3$===void 0?void 0:(_directions$routes$3$2=_directions$routes$3$.duration)===null||_directions$routes$3$2===void 0?void 0:_directions$routes$3$2.text)]})]})]})]})]})}),directions&&showDirections&&/*#__PURE__*/_jsx(DirectionsRenderer,{directions:directions,routeIndex:0,options:{polylineOptions:{strokeColor:'#ef4444',strokeWeight:6,strokeOpacity:0.8},suppressMarkers:true,preserveViewport:false}}),alternativeRoutes.slice(1).map((route,index)=>/*#__PURE__*/_jsx(DirectionsRenderer,{directions:_objectSpread(_objectSpread({},directions),{},{routes:[route.route]}),options:{polylineOptions:{strokeColor:'#6b7280',strokeWeight:3,strokeOpacity:0.5},suppressMarkers:true,preserveViewport:true}},\"alt-route-\".concat(index))),showTraffic&&/*#__PURE__*/_jsx(TrafficLayer,{})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"absolute top-2 right-2 bg-white p-2 rounded-lg shadow-lg text-xs\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-1 mb-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-red-500 rounded-full\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Your Location\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-1 mb-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-green-500 rounded-full\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Available Agent\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-1 mb-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-amber-500 rounded-full\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Busy Agent\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-red-500 rounded-full border-2 border-white\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Assigned Agent\"})]})]}),!isLoaded&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute inset-0 bg-gray-100 rounded-lg flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto mb-2\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-600\",children:\"Loading map...\"})]})})]});};export default LiveTrackingMap;","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","LoadScript","Marker","InfoWindow","DirectionsRenderer","TrafficLayer","Circle","Polyline","jsx","_jsx","jsxs","_jsxs","mapContainerStyle","width","height","borderRadius","border","defaultCenter","lat","lng","libraries","mapOptions","disableDefaultUI","zoomControl","streetViewControl","mapTypeControl","fullscreenControl","trafficLayer","styles","featureType","elementType","stylers","visibility","color","LiveTrackingMap","_ref","_window$google","_window$google3","_directions$routes$","_directions$routes$$l","_directions$routes$$l2","_directions$routes$2","_directions$routes$2$","_directions$routes$2$2","_directions$routes$3","_directions$routes$3$","_directions$routes$3$2","userLocation","agentLocation","sosAlert","className","showDirections","showTraffic","showGeofence","onMapLoad","onRouteUpdate","agents","map","setMap","directions","setDirections","alternativeRoutes","setAlternativeRoutes","selectedAgent","setSelectedAgent","isLoaded","setIsLoaded","setTrafficLayer","routeHistory","setRouteHistory","weatherOverlay","setWeatherOverlay","emergencyRadius","setEmergencyRadius","calculateAdvancedRouting","origin","destination","window","google","directionsService","maps","DirectionsService","requests","travelMode","TravelMode","DRIVING","drivingOptions","departureTime","Date","trafficModel","TrafficModel","BEST_GUESS","provideRouteAlternatives","avoidHighways","avoidTolls","optimizeWaypoints","results","Promise","all","request","resolve","reject","route","result","status","Error","concat","mainResult","allRoutes","routes","index","leg","legs","distance","duration","duration_in_traffic","start_address","end_address","steps","fastestRoute","reduce","fastest","current","_fastest$duration_in_","_current$duration_in_","fastestTime","value","currentTime","trafficData","getTrafficConditions","prev","slice","timestamp","traffic_conditions","_fastestRoute$duratio","_fastestRoute$duratio2","text","eta","now","alternative_routes","length","traffic_delay","route_quality","calculateRouteQuality","main_route","alternatives","traffic_data","error","console","calculateBasicETA","distanceService","DistanceMatrixService","getDistanceMatrix","origins","destinations","response","_response$rows$","element","rows","elements","traffic_delay_seconds","score","delay","Math","min","max","routeUpdateInterval","setInterval","clearInterval","traffic","onLoad","bounds","LatLngBounds","extend","fitBounds","onUnmount","getAgentIcon","agent","baseUrl","id","assigned_agent_id","svg","url","btoa","scaledSize","Size","anchor","Point","userIcon","children","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","zoom","center","options","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","position","icon","title","zIndex","animation","Animation","DROP","_window$google2","parseFloat","current_lat","current_lng","name","onClick","BOUNCE","path","entry","_entry$route$start_lo","_entry$route$start_lo2","start_location","filter","point","icons","SymbolPath","FORWARD_CLOSED_ARROW","scale","offset","onCloseClick","badge_number","phone","vehicle_info","routeIndex","polylineOptions","suppressMarkers","preserveViewport","_objectSpread"],"sources":["C:/Users/ntoam/Desktop/Projects/CrisisLink2.0/frontend/src/components/LiveTrackingMap.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  GoogleMap, \r\n  LoadScript, \r\n  Marker, \r\n  InfoWindow, \r\n  DirectionsRenderer,\r\n  TrafficLayer,\r\n  Circle,\r\n  Polyline\r\n} from '@react-google-maps/api';\r\n\r\nconst mapContainerStyle = {\r\n  width: '100%',\r\n  height: '400px',\r\n  borderRadius: '12px',\r\n  border: '2px solid #e5e7eb'\r\n};\r\n\r\nconst defaultCenter = {\r\n  lat: -26.2041, // Johannesburg, South Africa\r\n  lng: 28.0473\r\n};\r\n\r\n// Google APIs to load\r\nconst libraries = ['places', 'geometry', 'directions', 'visualization'];\r\n\r\nconst mapOptions = {\r\n  disableDefaultUI: false,\r\n  zoomControl: true,\r\n  streetViewControl: false,\r\n  mapTypeControl: true,\r\n  fullscreenControl: true,\r\n  trafficLayer: true,\r\n  styles: [\r\n    {\r\n      featureType: 'poi',\r\n      elementType: 'labels',\r\n      stylers: [{ visibility: 'off' }]\r\n    },\r\n    {\r\n      featureType: 'road',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#f5f5f5' }]\r\n    },\r\n    {\r\n      featureType: 'road.highway',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#dadada' }]\r\n    }\r\n  ]\r\n};\r\n\r\nconst LiveTrackingMap = ({ \r\n  userLocation, \r\n  agentLocation, \r\n  sosAlert, \r\n  className = '',\r\n  showDirections = true,\r\n  showTraffic = true,\r\n  showGeofence = true,\r\n  onMapLoad,\r\n  onRouteUpdate,\r\n  agents = []\r\n}) => {\r\n  const [map, setMap] = useState(null);\r\n  const [directions, setDirections] = useState(null);\r\n  const [alternativeRoutes, setAlternativeRoutes] = useState([]);\r\n  const [selectedAgent, setSelectedAgent] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [trafficLayer, setTrafficLayer] = useState(null);\r\n  const [routeHistory, setRouteHistory] = useState([]);\r\n  const [weatherOverlay, setWeatherOverlay] = useState(null);\r\n  const [emergencyRadius, setEmergencyRadius] = useState(100); // meters\r\n\r\n  // Enhanced routing with multiple options and real-time updates\r\n  const calculateAdvancedRouting = useCallback(async (origin, destination) => {\r\n    if (!window.google || !origin || !destination) return null;\r\n\r\n    const directionsService = new window.google.maps.DirectionsService();\r\n    \r\n    try {\r\n      // Get multiple route options\r\n      const requests = [\r\n        {\r\n          origin: origin,\r\n          destination: destination,\r\n          travelMode: window.google.maps.TravelMode.DRIVING,\r\n          drivingOptions: {\r\n            departureTime: new Date(),\r\n            trafficModel: window.google.maps.TrafficModel.BEST_GUESS\r\n          },\r\n          provideRouteAlternatives: true,\r\n          avoidHighways: false,\r\n          avoidTolls: false,\r\n          optimizeWaypoints: true\r\n        }\r\n      ];\r\n\r\n      const results = await Promise.all(\r\n        requests.map(request => \r\n          new Promise((resolve, reject) => {\r\n            directionsService.route(request, (result, status) => {\r\n              if (status === 'OK') {\r\n                resolve(result);\r\n              } else {\r\n                reject(new Error(`Directions request failed: ${status}`));\r\n              }\r\n            });\r\n          })\r\n        )\r\n      );\r\n\r\n      const mainResult = results[0];\r\n      setDirections(mainResult);\r\n\r\n      // Process all routes\r\n      const allRoutes = mainResult.routes.map((route, index) => {\r\n        const leg = route.legs[0];\r\n        return {\r\n          index,\r\n          distance: leg.distance,\r\n          duration: leg.duration,\r\n          duration_in_traffic: leg.duration_in_traffic || leg.duration,\r\n          start_address: leg.start_address,\r\n          end_address: leg.end_address,\r\n          steps: leg.steps,\r\n          route: route\r\n        };\r\n      });\r\n\r\n      // Select fastest route considering traffic\r\n      const fastestRoute = allRoutes.reduce((fastest, current) => {\r\n        const fastestTime = fastest.duration_in_traffic?.value || fastest.duration.value;\r\n        const currentTime = current.duration_in_traffic?.value || current.duration.value;\r\n        return currentTime < fastestTime ? current : fastest;\r\n      });\r\n\r\n      setAlternativeRoutes(allRoutes);\r\n\r\n      // Get traffic conditions and update everything\r\n      const trafficData = await getTrafficConditions(origin, destination);\r\n      \r\n      // Update route history for pattern analysis\r\n      setRouteHistory(prev => [...prev.slice(-10), {\r\n        timestamp: new Date(),\r\n        route: fastestRoute,\r\n        traffic_conditions: trafficData\r\n      }]);\r\n\r\n      // Dispatch comprehensive route info\r\n      if (onMapLoad) {\r\n        onMapLoad({\r\n          distance: fastestRoute.distance.text,\r\n          duration: fastestRoute.duration.text,\r\n          duration_in_traffic: fastestRoute.duration_in_traffic?.text || fastestRoute.duration.text,\r\n          eta: new Date(Date.now() + (fastestRoute.duration_in_traffic?.value || fastestRoute.duration.value) * 1000),\r\n          alternative_routes: allRoutes.length,\r\n          traffic_delay: fastestRoute.duration_in_traffic ? \r\n            (fastestRoute.duration_in_traffic.value - fastestRoute.duration.value) / 60 : 0,\r\n          route_quality: calculateRouteQuality(fastestRoute)\r\n        });\r\n      }\r\n\r\n      if (onRouteUpdate) {\r\n        onRouteUpdate({\r\n          main_route: fastestRoute,\r\n          alternatives: allRoutes,\r\n          traffic_data: trafficData\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Advanced routing error:', error);\r\n      // Fallback to basic routing\r\n      calculateBasicETA(origin, destination);\r\n    }\r\n  }, [onMapLoad, onRouteUpdate]);\r\n\r\n  // Fallback basic routing\r\n  const calculateBasicETA = useCallback((origin, destination) => {\r\n    const directionsService = new window.google.maps.DirectionsService();\r\n    \r\n    directionsService.route({\r\n      origin: origin,\r\n      destination: destination,\r\n      travelMode: window.google.maps.TravelMode.DRIVING,\r\n    }, (result, status) => {\r\n      if (status === 'OK') {\r\n        setDirections(result);\r\n        const route = result.routes[0];\r\n        const leg = route.legs[0];\r\n        \r\n        if (onMapLoad) {\r\n          onMapLoad({\r\n            distance: leg.distance.text,\r\n            duration: leg.duration.text,\r\n            eta: new Date(Date.now() + leg.duration.value * 1000)\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }, [onMapLoad]);\r\n\r\n  // Get real-time traffic conditions\r\n  const getTrafficConditions = async (origin, destination) => {\r\n    try {\r\n      const distanceService = new window.google.maps.DistanceMatrixService();\r\n      \r\n      return new Promise((resolve) => {\r\n        distanceService.getDistanceMatrix({\r\n          origins: [origin],\r\n          destinations: [destination],\r\n          travelMode: window.google.maps.TravelMode.DRIVING,\r\n          drivingOptions: {\r\n            departureTime: new Date(),\r\n            trafficModel: window.google.maps.TrafficModel.BEST_GUESS\r\n          },\r\n          avoidHighways: false,\r\n          avoidTolls: false,\r\n        }, (response, status) => {\r\n          if (status === 'OK') {\r\n            const element = response.rows[0]?.elements[0];\r\n            if (element?.status === 'OK') {\r\n              resolve({\r\n                distance: element.distance,\r\n                duration: element.duration,\r\n                duration_in_traffic: element.duration_in_traffic,\r\n                traffic_delay_seconds: element.duration_in_traffic ? \r\n                  element.duration_in_traffic.value - element.duration.value : 0\r\n              });\r\n            }\r\n          }\r\n          resolve(null);\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Traffic conditions error:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Calculate route quality score\r\n  const calculateRouteQuality = (route) => {\r\n    let score = 100;\r\n    \r\n    // Penalize for traffic delays\r\n    if (route.duration_in_traffic && route.duration) {\r\n      const delay = (route.duration_in_traffic.value - route.duration.value) / 60;\r\n      score -= Math.min(delay * 2, 30); // Max 30 point penalty\r\n    }\r\n    \r\n    // Penalize for longer distances\r\n    const distance = route.distance.value / 1000; // km\r\n    if (distance > 20) score -= (distance - 20) * 0.5;\r\n    \r\n    return Math.max(score, 0);\r\n  };\r\n\r\n  // Update directions when locations change with real-time routing\r\n  useEffect(() => {\r\n    if (isLoaded && userLocation && agentLocation && showDirections) {\r\n      calculateAdvancedRouting(agentLocation, userLocation);\r\n    }\r\n  }, [userLocation, agentLocation, showDirections, isLoaded, calculateAdvancedRouting]);\r\n\r\n  // Set up real-time route updates every 2 minutes\r\n  useEffect(() => {\r\n    if (isLoaded && userLocation && agentLocation && showDirections) {\r\n      const routeUpdateInterval = setInterval(() => {\r\n        calculateAdvancedRouting(agentLocation, userLocation);\r\n      }, 120000); // 2 minutes\r\n\r\n      return () => clearInterval(routeUpdateInterval);\r\n    }\r\n  }, [userLocation, agentLocation, showDirections, isLoaded, calculateAdvancedRouting]);\r\n\r\n  // Initialize traffic layer\r\n  useEffect(() => {\r\n    if (map && showTraffic && !trafficLayer) {\r\n      const traffic = new window.google.maps.TrafficLayer();\r\n      traffic.setMap(map);\r\n      setTrafficLayer(traffic);\r\n    }\r\n    \r\n    return () => {\r\n      if (trafficLayer) {\r\n        trafficLayer.setMap(null);\r\n      }\r\n    };\r\n  }, [map, showTraffic, trafficLayer]);\r\n\r\n  const onLoad = useCallback((map) => {\r\n    setMap(map);\r\n    setIsLoaded(true);\r\n    \r\n    // Fit bounds to show both user and agent\r\n    if (userLocation && agentLocation) {\r\n      const bounds = new window.google.maps.LatLngBounds();\r\n      bounds.extend(userLocation);\r\n      bounds.extend(agentLocation);\r\n      map.fitBounds(bounds);\r\n    }\r\n  }, [userLocation, agentLocation]);\r\n\r\n  const onUnmount = useCallback(() => {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  // Get marker icon based on agent status\r\n  const getAgentIcon = (agent) => {\r\n    const baseUrl = 'data:image/svg+xml;base64,';\r\n    let color = '#10b981'; // green for available\r\n    \r\n    if (agent.status === 'busy') color = '#f59e0b'; // amber\r\n    if (agent.status === 'offline') color = '#6b7280'; // gray\r\n    if (agent.id === sosAlert?.assigned_agent_id) color = '#ef4444'; // red for assigned\r\n    \r\n    const svg = `\r\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"${color}\" stroke=\"white\" stroke-width=\"2\"/>\r\n        <path d=\"M12 6v12M6 12h12\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\"/>\r\n      </svg>\r\n    `;\r\n    \r\n    return {\r\n      url: baseUrl + btoa(svg),\r\n      scaledSize: new window.google.maps.Size(32, 32),\r\n      anchor: new window.google.maps.Point(16, 16)\r\n    };\r\n  };\r\n\r\n  // User location icon (red SOS marker)\r\n  const userIcon = {\r\n    url: 'data:image/svg+xml;base64,' + btoa(`\r\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <circle cx=\"16\" cy=\"16\" r=\"14\" fill=\"#ef4444\" stroke=\"white\" stroke-width=\"3\"/>\r\n        <text x=\"16\" y=\"20\" text-anchor=\"middle\" fill=\"white\" font-size=\"12\" font-weight=\"bold\">SOS</text>\r\n      </svg>\r\n    `),\r\n    scaledSize: new window.google.maps.Size(32, 32),\r\n    anchor: new window.google.maps.Point(16, 16)\r\n  };\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <LoadScript\r\n        googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\r\n        libraries={libraries}\r\n      >\r\n        <GoogleMap\r\n          mapContainerStyle={mapContainerStyle}\r\n          zoom={13}\r\n          center={userLocation || agentLocation || defaultCenter}\r\n          options={mapOptions}\r\n          onLoad={onLoad}\r\n          onUnmount={onUnmount}\r\n        >\r\n          {/* Emergency radius geofence */}\r\n          {userLocation && showGeofence && (\r\n            <Circle\r\n              center={userLocation}\r\n              radius={emergencyRadius}\r\n              options={{\r\n                fillColor: '#ef4444',\r\n                fillOpacity: 0.1,\r\n                strokeColor: '#ef4444',\r\n                strokeOpacity: 0.5,\r\n                strokeWeight: 2,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {/* User location marker */}\r\n          {userLocation && (\r\n            <Marker\r\n              position={userLocation}\r\n              icon={userIcon}\r\n              title=\"Your Location (SOS Alert)\"\r\n              zIndex={1000}\r\n              animation={window.google?.maps.Animation.DROP}\r\n            />\r\n          )}\r\n\r\n          {/* Agent markers with enhanced info */}\r\n          {agents.map((agent, index) => (\r\n            <Marker\r\n              key={agent.id}\r\n              position={{\r\n                lat: parseFloat(agent.current_lat),\r\n                lng: parseFloat(agent.current_lng)\r\n              }}\r\n              icon={getAgentIcon(agent)}\r\n              title={`Agent ${agent.name} - ${agent.status}`}\r\n              onClick={() => setSelectedAgent(agent)}\r\n              zIndex={agent.id === sosAlert?.assigned_agent_id ? 999 : 100}\r\n              animation={agent.id === sosAlert?.assigned_agent_id ? \r\n                window.google?.maps.Animation.BOUNCE : null}\r\n            />\r\n          ))}\r\n\r\n          {/* Route history visualization */}\r\n          {routeHistory.length > 1 && (\r\n            <Polyline\r\n              path={routeHistory.map(entry => ({\r\n                lat: entry.route.start_location?.lat || agentLocation?.lat,\r\n                lng: entry.route.start_location?.lng || agentLocation?.lng\r\n              })).filter(point => point.lat && point.lng)}\r\n              options={{\r\n                strokeColor: '#10b981',\r\n                strokeOpacity: 0.6,\r\n                strokeWeight: 2,\r\n                icons: [\r\n                  {\r\n                    icon: {\r\n                      path: window.google?.maps.SymbolPath.FORWARD_CLOSED_ARROW,\r\n                      scale: 2,\r\n                      strokeColor: '#10b981'\r\n                    },\r\n                    offset: '100%'\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {/* Enhanced agent info window */}\r\n          {selectedAgent && (\r\n            <InfoWindow\r\n              position={{\r\n                lat: parseFloat(selectedAgent.current_lat),\r\n                lng: parseFloat(selectedAgent.current_lng)\r\n              }}\r\n              onCloseClick={() => setSelectedAgent(null)}\r\n            >\r\n              <div className=\"p-3 min-w-64\">\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <h3 className=\"font-bold text-sm\">Agent {selectedAgent.name}</h3>\r\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                    selectedAgent.status === 'available' ? 'bg-green-100 text-green-800' :\r\n                    selectedAgent.status === 'busy' ? 'bg-yellow-100 text-yellow-800' :\r\n                    'bg-gray-100 text-gray-800'\r\n                  }`}>\r\n                    {selectedAgent.status}\r\n                  </span>\r\n                </div>\r\n                \r\n                <div className=\"space-y-1 text-xs text-gray-600\">\r\n                  <p><strong>Badge:</strong> {selectedAgent.badge_number}</p>\r\n                  <p><strong>Phone:</strong> {selectedAgent.phone}</p>\r\n                  <p><strong>Vehicle:</strong> {selectedAgent.vehicle_info || 'Not specified'}</p>\r\n                  \r\n                  {selectedAgent.id === sosAlert?.assigned_agent_id && (\r\n                    <div className=\"mt-2 p-2 bg-red-50 rounded border-l-4 border-red-400\">\r\n                      <p className=\"text-red-700 font-bold text-xs\">🚨 Assigned to your SOS</p>\r\n                      {directions && (\r\n                        <div className=\"mt-1 text-xs\">\r\n                          <p>Distance: {directions.routes[0]?.legs[0]?.distance?.text}</p>\r\n                          <p>ETA: {directions.routes[0]?.legs[0]?.duration_in_traffic?.text || \r\n                            directions.routes[0]?.legs[0]?.duration?.text}</p>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </InfoWindow>\r\n          )}\r\n\r\n          {/* Main route */}\r\n          {directions && showDirections && (\r\n            <DirectionsRenderer\r\n              directions={directions}\r\n              routeIndex={0}\r\n              options={{\r\n                polylineOptions: {\r\n                  strokeColor: '#ef4444',\r\n                  strokeWeight: 6,\r\n                  strokeOpacity: 0.8\r\n                },\r\n                suppressMarkers: true,\r\n                preserveViewport: false\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {/* Alternative routes */}\r\n          {alternativeRoutes.slice(1).map((route, index) => (\r\n            <DirectionsRenderer\r\n              key={`alt-route-${index}`}\r\n              directions={{\r\n                ...directions,\r\n                routes: [route.route]\r\n              }}\r\n              options={{\r\n                polylineOptions: {\r\n                  strokeColor: '#6b7280',\r\n                  strokeWeight: 3,\r\n                  strokeOpacity: 0.5\r\n                },\r\n                suppressMarkers: true,\r\n                preserveViewport: true\r\n              }}\r\n            />\r\n          ))}\r\n\r\n          {/* Traffic Layer */}\r\n          {showTraffic && <TrafficLayer />}\r\n        </GoogleMap>\r\n      </LoadScript>\r\n\r\n      {/* Map legend */}\r\n      <div className=\"absolute top-2 right-2 bg-white p-2 rounded-lg shadow-lg text-xs\">\r\n        <div className=\"flex items-center gap-1 mb-1\">\r\n          <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\r\n          <span>Your Location</span>\r\n        </div>\r\n        <div className=\"flex items-center gap-1 mb-1\">\r\n          <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\r\n          <span>Available Agent</span>\r\n        </div>\r\n        <div className=\"flex items-center gap-1 mb-1\">\r\n          <div className=\"w-3 h-3 bg-amber-500 rounded-full\"></div>\r\n          <span>Busy Agent</span>\r\n        </div>\r\n        <div className=\"flex items-center gap-1\">\r\n          <div className=\"w-3 h-3 bg-red-500 rounded-full border-2 border-white\"></div>\r\n          <span>Assigned Agent</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Loading overlay */}\r\n      {!isLoaded && (\r\n        <div className=\"absolute inset-0 bg-gray-100 rounded-lg flex items-center justify-center\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto mb-2\"></div>\r\n            <p className=\"text-sm text-gray-600\">Loading map...</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveTrackingMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}