{"ast":null,"code":"// LocationService.js - Handles geolocation, tracking, and distance calculations\nclass LocationService{constructor(){this.watchId=null;this.currentPosition=null;this.trackingCallbacks=new Set();this.options={enableHighAccuracy:true,timeout:10000,maximumAge:30000};}// Get current location (one-time)\nasync getCurrentLocation(){return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject(new Error('Geolocation is not supported by this browser'));return;}navigator.geolocation.getCurrentPosition(position=>{const location={lat:position.coords.latitude,lng:position.coords.longitude,accuracy:position.coords.accuracy,timestamp:new Date(position.timestamp)};this.currentPosition=location;resolve(location);},error=>{let errorMessage='Unknown location error';switch(error.code){case error.PERMISSION_DENIED:errorMessage='Location access denied by user';break;case error.POSITION_UNAVAILABLE:errorMessage='Location information unavailable';break;case error.TIMEOUT:errorMessage='Location request timed out';break;}reject(new Error(errorMessage));},this.options);});}// Start continuous location tracking\nstartTracking(callback){if(!navigator.geolocation){throw new Error('Geolocation is not supported by this browser');}// Add callback to set\nif(callback){this.trackingCallbacks.add(callback);}// Start watching if not already started\nif(!this.watchId){this.watchId=navigator.geolocation.watchPosition(position=>{const location={lat:position.coords.latitude,lng:position.coords.longitude,accuracy:position.coords.accuracy,speed:position.coords.speed,heading:position.coords.heading,timestamp:new Date(position.timestamp)};this.currentPosition=location;// Notify all callbacks\nthis.trackingCallbacks.forEach(callback=>{try{callback(location);}catch(error){console.error('Error in location callback:',error);}});},error=>{console.error('Location tracking error:',error);this.trackingCallbacks.forEach(callback=>{try{callback(null,error);}catch(callbackError){console.error('Error in location error callback:',callbackError);}});},this.options);}return this.watchId;}// Stop location tracking\nstopTracking(){let callback=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(callback){this.trackingCallbacks.delete(callback);}// If no more callbacks, stop watching\nif(this.trackingCallbacks.size===0&&this.watchId){navigator.geolocation.clearWatch(this.watchId);this.watchId=null;}}// Stop all tracking\nstopAllTracking(){if(this.watchId){navigator.geolocation.clearWatch(this.watchId);this.watchId=null;}this.trackingCallbacks.clear();}// Calculate distance between two points (Haversine formula)\ncalculateDistance(lat1,lng1,lat2,lng2){const R=6371;// Earth's radius in kilometers\nconst dLat=this.toRadians(lat2-lat1);const dLng=this.toRadians(lng2-lng1);const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(this.toRadians(lat1))*Math.cos(this.toRadians(lat2))*Math.sin(dLng/2)*Math.sin(dLng/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));const distance=R*c;return{kilometers:distance,meters:distance*1000,miles:distance*0.621371};}// Calculate bearing between two points\ncalculateBearing(lat1,lng1,lat2,lng2){const dLng=this.toRadians(lng2-lng1);const lat1Rad=this.toRadians(lat1);const lat2Rad=this.toRadians(lat2);const y=Math.sin(dLng)*Math.cos(lat2Rad);const x=Math.cos(lat1Rad)*Math.sin(lat2Rad)-Math.sin(lat1Rad)*Math.cos(lat2Rad)*Math.cos(dLng);const bearing=this.toDegrees(Math.atan2(y,x));return(bearing+360)%360;// Normalize to 0-360\n}// Check if user is within a certain radius of a point\nisWithinRadius(targetLat,targetLng,radiusMeters){var _this$currentPosition,_this$currentPosition2;let currentLat=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let currentLng=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;const userLat=currentLat||((_this$currentPosition=this.currentPosition)===null||_this$currentPosition===void 0?void 0:_this$currentPosition.lat);const userLng=currentLng||((_this$currentPosition2=this.currentPosition)===null||_this$currentPosition2===void 0?void 0:_this$currentPosition2.lng);if(!userLat||!userLng){return false;}const distance=this.calculateDistance(userLat,userLng,targetLat,targetLng);return distance.meters<=radiusMeters;}// Get address from coordinates (reverse geocoding)\nasync reverseGeocode(lat,lng){try{const geocoder=new window.google.maps.Geocoder();return new Promise((resolve,reject)=>{geocoder.geocode({location:{lat,lng}},(results,status)=>{if(status==='OK'){if(results[0]){resolve({formatted_address:results[0].formatted_address,address_components:results[0].address_components,place_id:results[0].place_id});}else{reject(new Error('No results found'));}}else{reject(new Error(\"Geocoder failed: \".concat(status)));}});});}catch(error){throw new Error(\"Reverse geocoding failed: \".concat(error.message));}}// Get coordinates from address (forward geocoding)\nasync geocode(address){try{const geocoder=new window.google.maps.Geocoder();return new Promise((resolve,reject)=>{geocoder.geocode({address},(results,status)=>{if(status==='OK'){if(results[0]){const location=results[0].geometry.location;resolve({lat:location.lat(),lng:location.lng(),formatted_address:results[0].formatted_address,place_id:results[0].place_id});}else{reject(new Error('No results found'));}}else{reject(new Error(\"Geocoder failed: \".concat(status)));}});});}catch(error){throw new Error(\"Geocoding failed: \".concat(error.message));}}// Format coordinates for display\nformatCoordinates(lat,lng){let precision=arguments.length>2&&arguments[2]!==undefined?arguments[2]:6;return{decimal:\"\".concat(lat.toFixed(precision),\", \").concat(lng.toFixed(precision)),dms:this.toDMS(lat,lng)};}// Convert decimal degrees to degrees, minutes, seconds\ntoDMS(lat,lng){const formatDMS=(coordinate,isLat)=>{const absolute=Math.abs(coordinate);const degrees=Math.floor(absolute);const minutes=Math.floor((absolute-degrees)*60);const seconds=((absolute-degrees-minutes/60)*3600).toFixed(2);const direction=isLat?coordinate>=0?'N':'S':coordinate>=0?'E':'W';return\"\".concat(degrees,\"\\xB0\").concat(minutes,\"'\").concat(seconds,\"\\\"\").concat(direction);};return{latitude:formatDMS(lat,true),longitude:formatDMS(lng,false),formatted:\"\".concat(formatDMS(lat,true),\" \").concat(formatDMS(lng,false))};}// Utility functions\ntoRadians(degrees){return degrees*(Math.PI/180);}toDegrees(radians){return radians*(180/Math.PI);}// Get current position (cached)\ngetCurrentPosition(){return this.currentPosition;}// Check if geolocation is supported\nstatic isSupported(){return'geolocation'in navigator;}// Check location permissions\nasync checkPermissions(){if(!navigator.permissions){return'unknown';}try{const permission=await navigator.permissions.query({name:'geolocation'});return permission.state;// 'granted', 'denied', or 'prompt'\n}catch(error){return'unknown';}}// Request location permissions\nasync requestPermissions(){try{const position=await this.getCurrentLocation();return{success:true,position};}catch(error){return{success:false,error:error.message};}}}// Create singleton instance\nconst locationService=new LocationService();export default locationService;","map":{"version":3,"names":["LocationService","constructor","watchId","currentPosition","trackingCallbacks","Set","options","enableHighAccuracy","timeout","maximumAge","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","location","lat","coords","latitude","lng","longitude","accuracy","timestamp","Date","error","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","startTracking","callback","add","watchPosition","speed","heading","forEach","console","callbackError","stopTracking","arguments","length","undefined","delete","size","clearWatch","stopAllTracking","clear","calculateDistance","lat1","lng1","lat2","lng2","R","dLat","toRadians","dLng","a","Math","sin","cos","c","atan2","sqrt","distance","kilometers","meters","miles","calculateBearing","lat1Rad","lat2Rad","y","x","bearing","toDegrees","isWithinRadius","targetLat","targetLng","radiusMeters","_this$currentPosition","_this$currentPosition2","currentLat","currentLng","userLat","userLng","reverseGeocode","geocoder","window","google","maps","Geocoder","geocode","results","status","formatted_address","address_components","place_id","concat","message","address","geometry","formatCoordinates","precision","decimal","toFixed","dms","toDMS","formatDMS","coordinate","isLat","absolute","abs","degrees","floor","minutes","seconds","direction","formatted","PI","radians","isSupported","checkPermissions","permissions","permission","query","name","state","requestPermissions","success","locationService"],"sources":["C:/Users/ntoam/Desktop/Projects/CrisisLink2.0/frontend/src/services/LocationService.js"],"sourcesContent":["// LocationService.js - Handles geolocation, tracking, and distance calculations\r\nclass LocationService {\r\n  constructor() {\r\n    this.watchId = null;\r\n    this.currentPosition = null;\r\n    this.trackingCallbacks = new Set();\r\n    this.options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 10000,\r\n      maximumAge: 30000\r\n    };\r\n  }\r\n\r\n  // Get current location (one-time)\r\n  async getCurrentLocation() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Geolocation is not supported by this browser'));\r\n        return;\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const location = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n            accuracy: position.coords.accuracy,\r\n            timestamp: new Date(position.timestamp)\r\n          };\r\n          this.currentPosition = location;\r\n          resolve(location);\r\n        },\r\n        (error) => {\r\n          let errorMessage = 'Unknown location error';\r\n          switch (error.code) {\r\n            case error.PERMISSION_DENIED:\r\n              errorMessage = 'Location access denied by user';\r\n              break;\r\n            case error.POSITION_UNAVAILABLE:\r\n              errorMessage = 'Location information unavailable';\r\n              break;\r\n            case error.TIMEOUT:\r\n              errorMessage = 'Location request timed out';\r\n              break;\r\n          }\r\n          reject(new Error(errorMessage));\r\n        },\r\n        this.options\r\n      );\r\n    });\r\n  }\r\n\r\n  // Start continuous location tracking\r\n  startTracking(callback) {\r\n    if (!navigator.geolocation) {\r\n      throw new Error('Geolocation is not supported by this browser');\r\n    }\r\n\r\n    // Add callback to set\r\n    if (callback) {\r\n      this.trackingCallbacks.add(callback);\r\n    }\r\n\r\n    // Start watching if not already started\r\n    if (!this.watchId) {\r\n      this.watchId = navigator.geolocation.watchPosition(\r\n        (position) => {\r\n          const location = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n            accuracy: position.coords.accuracy,\r\n            speed: position.coords.speed,\r\n            heading: position.coords.heading,\r\n            timestamp: new Date(position.timestamp)\r\n          };\r\n          \r\n          this.currentPosition = location;\r\n          \r\n          // Notify all callbacks\r\n          this.trackingCallbacks.forEach(callback => {\r\n            try {\r\n              callback(location);\r\n            } catch (error) {\r\n              console.error('Error in location callback:', error);\r\n            }\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error('Location tracking error:', error);\r\n          this.trackingCallbacks.forEach(callback => {\r\n            try {\r\n              callback(null, error);\r\n            } catch (callbackError) {\r\n              console.error('Error in location error callback:', callbackError);\r\n            }\r\n          });\r\n        },\r\n        this.options\r\n      );\r\n    }\r\n\r\n    return this.watchId;\r\n  }\r\n\r\n  // Stop location tracking\r\n  stopTracking(callback = null) {\r\n    if (callback) {\r\n      this.trackingCallbacks.delete(callback);\r\n    }\r\n\r\n    // If no more callbacks, stop watching\r\n    if (this.trackingCallbacks.size === 0 && this.watchId) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n    }\r\n  }\r\n\r\n  // Stop all tracking\r\n  stopAllTracking() {\r\n    if (this.watchId) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n    }\r\n    this.trackingCallbacks.clear();\r\n  }\r\n\r\n  // Calculate distance between two points (Haversine formula)\r\n  calculateDistance(lat1, lng1, lat2, lng2) {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = this.toRadians(lat2 - lat1);\r\n    const dLng = this.toRadians(lng2 - lng1);\r\n    \r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * \r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distance = R * c;\r\n    \r\n    return {\r\n      kilometers: distance,\r\n      meters: distance * 1000,\r\n      miles: distance * 0.621371\r\n    };\r\n  }\r\n\r\n  // Calculate bearing between two points\r\n  calculateBearing(lat1, lng1, lat2, lng2) {\r\n    const dLng = this.toRadians(lng2 - lng1);\r\n    const lat1Rad = this.toRadians(lat1);\r\n    const lat2Rad = this.toRadians(lat2);\r\n    \r\n    const y = Math.sin(dLng) * Math.cos(lat2Rad);\r\n    const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - \r\n              Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLng);\r\n    \r\n    const bearing = this.toDegrees(Math.atan2(y, x));\r\n    return (bearing + 360) % 360; // Normalize to 0-360\r\n  }\r\n\r\n  // Check if user is within a certain radius of a point\r\n  isWithinRadius(targetLat, targetLng, radiusMeters, currentLat = null, currentLng = null) {\r\n    const userLat = currentLat || this.currentPosition?.lat;\r\n    const userLng = currentLng || this.currentPosition?.lng;\r\n    \r\n    if (!userLat || !userLng) {\r\n      return false;\r\n    }\r\n    \r\n    const distance = this.calculateDistance(userLat, userLng, targetLat, targetLng);\r\n    return distance.meters <= radiusMeters;\r\n  }\r\n\r\n  // Get address from coordinates (reverse geocoding)\r\n  async reverseGeocode(lat, lng) {\r\n    try {\r\n      const geocoder = new window.google.maps.Geocoder();\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        geocoder.geocode(\r\n          { location: { lat, lng } },\r\n          (results, status) => {\r\n            if (status === 'OK') {\r\n              if (results[0]) {\r\n                resolve({\r\n                  formatted_address: results[0].formatted_address,\r\n                  address_components: results[0].address_components,\r\n                  place_id: results[0].place_id\r\n                });\r\n              } else {\r\n                reject(new Error('No results found'));\r\n              }\r\n            } else {\r\n              reject(new Error(`Geocoder failed: ${status}`));\r\n            }\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      throw new Error(`Reverse geocoding failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Get coordinates from address (forward geocoding)\r\n  async geocode(address) {\r\n    try {\r\n      const geocoder = new window.google.maps.Geocoder();\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        geocoder.geocode(\r\n          { address },\r\n          (results, status) => {\r\n            if (status === 'OK') {\r\n              if (results[0]) {\r\n                const location = results[0].geometry.location;\r\n                resolve({\r\n                  lat: location.lat(),\r\n                  lng: location.lng(),\r\n                  formatted_address: results[0].formatted_address,\r\n                  place_id: results[0].place_id\r\n                });\r\n              } else {\r\n                reject(new Error('No results found'));\r\n              }\r\n            } else {\r\n              reject(new Error(`Geocoder failed: ${status}`));\r\n            }\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      throw new Error(`Geocoding failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Format coordinates for display\r\n  formatCoordinates(lat, lng, precision = 6) {\r\n    return {\r\n      decimal: `${lat.toFixed(precision)}, ${lng.toFixed(precision)}`,\r\n      dms: this.toDMS(lat, lng)\r\n    };\r\n  }\r\n\r\n  // Convert decimal degrees to degrees, minutes, seconds\r\n  toDMS(lat, lng) {\r\n    const formatDMS = (coordinate, isLat) => {\r\n      const absolute = Math.abs(coordinate);\r\n      const degrees = Math.floor(absolute);\r\n      const minutes = Math.floor((absolute - degrees) * 60);\r\n      const seconds = ((absolute - degrees - minutes / 60) * 3600).toFixed(2);\r\n      \r\n      const direction = isLat \r\n        ? (coordinate >= 0 ? 'N' : 'S')\r\n        : (coordinate >= 0 ? 'E' : 'W');\r\n      \r\n      return `${degrees}°${minutes}'${seconds}\"${direction}`;\r\n    };\r\n    \r\n    return {\r\n      latitude: formatDMS(lat, true),\r\n      longitude: formatDMS(lng, false),\r\n      formatted: `${formatDMS(lat, true)} ${formatDMS(lng, false)}`\r\n    };\r\n  }\r\n\r\n  // Utility functions\r\n  toRadians(degrees) {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  toDegrees(radians) {\r\n    return radians * (180 / Math.PI);\r\n  }\r\n\r\n  // Get current position (cached)\r\n  getCurrentPosition() {\r\n    return this.currentPosition;\r\n  }\r\n\r\n  // Check if geolocation is supported\r\n  static isSupported() {\r\n    return 'geolocation' in navigator;\r\n  }\r\n\r\n  // Check location permissions\r\n  async checkPermissions() {\r\n    if (!navigator.permissions) {\r\n      return 'unknown';\r\n    }\r\n\r\n    try {\r\n      const permission = await navigator.permissions.query({ name: 'geolocation' });\r\n      return permission.state; // 'granted', 'denied', or 'prompt'\r\n    } catch (error) {\r\n      return 'unknown';\r\n    }\r\n  }\r\n\r\n  // Request location permissions\r\n  async requestPermissions() {\r\n    try {\r\n      const position = await this.getCurrentLocation();\r\n      return { success: true, position };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst locationService = new LocationService();\r\n\r\nexport default locationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}