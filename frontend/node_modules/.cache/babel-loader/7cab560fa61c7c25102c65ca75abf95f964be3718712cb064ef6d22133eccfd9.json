{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ntoam\\\\Desktop\\\\Projects\\\\CrisisLink2.0\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const login = async (email, password) => {\n    try {\n      // Mock login - replace with actual authentication\n      const mockUser = {\n        id: 1,\n        email,\n        name: 'Test User',\n        phone: '+27123456789'\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      return {\n        success: true,\n        user: mockUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  useEffect(() => {\n    // Check for stored user on mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","login","email","password","mockUser","id","name","phone","localStorage","setItem","JSON","stringify","success","error","message","logout","removeItem","storedUser","getItem","parse","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ntoam/Desktop/Projects/CrisisLink2.0/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react'\r\n\r\nconst AuthContext = createContext()\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext)\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider')\r\n  }\r\n  return context\r\n}\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Mock login - replace with actual authentication\r\n      const mockUser = {\r\n        id: 1,\r\n        email,\r\n        name: 'Test User',\r\n        phone: '+27123456789',\r\n      }\r\n      setUser(mockUser)\r\n      localStorage.setItem('user', JSON.stringify(mockUser))\r\n      return { success: true, user: mockUser }\r\n    } catch (error) {\r\n      return { success: false, error: error.message }\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    setUser(null)\r\n    localStorage.removeItem('user')\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Check for stored user on mount\r\n    const storedUser = localStorage.getItem('user')\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser))\r\n    }\r\n    setLoading(false)\r\n  }, [])\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading,\r\n  }\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n}\r\n\r\nexport default AuthContext\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAAAD,EAAA,CANYD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMgB,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG;QACfC,EAAE,EAAE,CAAC;QACLH,KAAK;QACLI,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE;MACT,CAAC;MACDT,OAAO,CAACM,QAAQ,CAAC;MACjBI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC;MACtD,OAAO;QAAEQ,OAAO,EAAE,IAAI;QAAEf,IAAI,EAAEO;MAAS,CAAC;IAC1C,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACC;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBjB,OAAO,CAAC,IAAI,CAAC;IACbU,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED9B,SAAS,CAAC,MAAM;IACd;IACA,MAAM+B,UAAU,GAAGT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAID,UAAU,EAAE;MACdnB,OAAO,CAACY,IAAI,CAACS,KAAK,CAACF,UAAU,CAAC,CAAC;IACjC;IACAjB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMoB,KAAK,GAAG;IACZvB,IAAI;IACJI,KAAK;IACLc,MAAM;IACNhB;EACF,CAAC;EAED,oBAAOX,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzB,QAAA,EAAEA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAA7B,GAAA,CA3CYF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AA6CzB,eAAeL,WAAW;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}