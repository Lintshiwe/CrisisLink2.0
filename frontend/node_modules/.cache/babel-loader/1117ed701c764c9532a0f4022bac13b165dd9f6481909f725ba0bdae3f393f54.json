{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ntoam\\\\Desktop\\\\Projects\\\\CrisisLink2.0\\\\frontend\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    // Initialize socket connection (allow polling fallback for dev/stability)\n    const isLocal = typeof window !== 'undefined' && /localhost|127\\.0\\.0\\.1/.test(window.location.hostname);\n    const newSocket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000', {\n      // Prefer polling first on localhost to avoid initial WebSocket console errors,\n      // then allow upgrade to websocket when possible.\n      transports: isLocal ? ['polling', 'websocket'] : ['websocket', 'polling'],\n      path: '/socket.io',\n      reconnection: true,\n      reconnectionAttempts: 10,\n      reconnectionDelay: 500,\n      timeout: 10000\n    });\n    newSocket.on('connect', () => {\n      setIsConnected(true);\n      console.log('Socket connected:', newSocket.id);\n\n      // Register frontend user with backend for tracking\n      const userData = {\n        userId: `USER-${Date.now()}`,\n        name: localStorage.getItem('userName') || 'Anonymous User',\n        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${encodeURIComponent(localStorage.getItem('userName') || 'Anonymous')}`,\n        company: 'Frontend User',\n        deviceInfo: `${navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop'} App v2.1.0`,\n        socketId: newSocket.id\n      };\n\n      // Store user ID for future use\n      localStorage.setItem('crisisLinkUserId', userData.userId);\n\n      // Register with backend\n      newSocket.emit('user-register', userData);\n\n      // Start location tracking if available\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const locationData = {\n            location: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n              address: 'Live Location'\n            },\n            battery: Math.round(Math.random() * 100),\n            // Mock battery level\n            threatLevel: 'Low'\n          };\n          newSocket.emit('user-location-update', locationData);\n        }, error => {\n          console.log('Location access denied or unavailable');\n        });\n      }\n    });\n    newSocket.on('disconnect', () => {\n      setIsConnected(false);\n      console.log('Socket disconnected');\n    });\n\n    // Listen for tracking requests from admin\n    newSocket.on('track-request', data => {\n      console.log('Tracking request received from admin:', data);\n      // User can respond to tracking requests here\n    });\n\n    // Listen for contact requests from admin\n    newSocket.on('contact-user-request', data => {\n      console.log('Contact request received from admin:', data);\n      // Show notification to user about contact request\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Send periodic location updates\n  useEffect(() => {\n    if (socket && isConnected) {\n      const locationInterval = setInterval(() => {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(position => {\n            const locationData = {\n              location: {\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n                address: 'Live Location'\n              },\n              battery: Math.round(20 + Math.random() * 80),\n              // Mock battery level\n              threatLevel: Math.random() > 0.8 ? 'Medium' : 'Low'\n            };\n            socket.emit('user-location-update', locationData);\n          }, error => {\n            // Silently handle location errors\n          });\n        }\n      }, 30000); // Update every 30 seconds\n\n      return () => clearInterval(locationInterval);\n    }\n  }, [socket, isConnected]);\n  const sendEmergencyAlert = alertData => {\n    if (socket && isConnected) {\n      socket.emit('emergency-alert', {\n        type: alertData.emergencyType || 'general',\n        message: alertData.description || 'Emergency assistance needed',\n        location: alertData.location,\n        severity: 'high'\n      });\n    }\n  };\n  const updateUserStatus = status => {\n    if (socket && isConnected) {\n      socket.emit('user-status-update', {\n        status\n      });\n    }\n  };\n  const value = {\n    socket,\n    isConnected,\n    sendEmergencyAlert,\n    updateUserStatus\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"31zblDxIJRhfMPac8JMzWE9f478=\");\n_c = SocketProvider;\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","isLocal","window","test","location","hostname","newSocket","process","env","REACT_APP_BACKEND_URL","transports","path","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","console","log","id","userData","userId","Date","now","name","localStorage","getItem","avatar","encodeURIComponent","company","deviceInfo","navigator","userAgent","includes","socketId","setItem","emit","geolocation","getCurrentPosition","position","locationData","lat","coords","latitude","lng","longitude","address","battery","Math","round","random","threatLevel","error","data","close","locationInterval","setInterval","clearInterval","sendEmergencyAlert","alertData","type","emergencyType","message","description","severity","updateUserStatus","status","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ntoam/Desktop/Projects/CrisisLink2.0/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\r\nimport { io } from 'socket.io-client'\r\n\r\nconst SocketContext = createContext()\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext)\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider')\r\n  }\r\n  return context\r\n}\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null)\r\n  const [isConnected, setIsConnected] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // Initialize socket connection (allow polling fallback for dev/stability)\r\n    const isLocal =\r\n      typeof window !== 'undefined' &&\r\n      /localhost|127\\.0\\.0\\.1/.test(window.location.hostname)\r\n    const newSocket = io(\r\n      process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000',\r\n      {\r\n        // Prefer polling first on localhost to avoid initial WebSocket console errors,\r\n        // then allow upgrade to websocket when possible.\r\n        transports: isLocal\r\n          ? ['polling', 'websocket']\r\n          : ['websocket', 'polling'],\r\n        path: '/socket.io',\r\n        reconnection: true,\r\n        reconnectionAttempts: 10,\r\n        reconnectionDelay: 500,\r\n        timeout: 10000,\r\n      }\r\n    )\r\n\r\n    newSocket.on('connect', () => {\r\n      setIsConnected(true)\r\n      console.log('Socket connected:', newSocket.id)\r\n\r\n      // Register frontend user with backend for tracking\r\n      const userData = {\r\n        userId: `USER-${Date.now()}`,\r\n        name: localStorage.getItem('userName') || 'Anonymous User',\r\n        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${encodeURIComponent(localStorage.getItem('userName') || 'Anonymous')}`,\r\n        company: 'Frontend User',\r\n        deviceInfo: `${navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop'} App v2.1.0`,\r\n        socketId: newSocket.id,\r\n      }\r\n\r\n      // Store user ID for future use\r\n      localStorage.setItem('crisisLinkUserId', userData.userId)\r\n\r\n      // Register with backend\r\n      newSocket.emit('user-register', userData)\r\n\r\n      // Start location tracking if available\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const locationData = {\r\n              location: {\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude,\r\n                address: 'Live Location',\r\n              },\r\n              battery: Math.round(Math.random() * 100), // Mock battery level\r\n              threatLevel: 'Low',\r\n            }\r\n\r\n            newSocket.emit('user-location-update', locationData)\r\n          },\r\n          (error) => {\r\n            console.log('Location access denied or unavailable')\r\n          }\r\n        )\r\n      }\r\n    })\r\n\r\n    newSocket.on('disconnect', () => {\r\n      setIsConnected(false)\r\n      console.log('Socket disconnected')\r\n    })\r\n\r\n    // Listen for tracking requests from admin\r\n    newSocket.on('track-request', (data) => {\r\n      console.log('Tracking request received from admin:', data)\r\n      // User can respond to tracking requests here\r\n    })\r\n\r\n    // Listen for contact requests from admin\r\n    newSocket.on('contact-user-request', (data) => {\r\n      console.log('Contact request received from admin:', data)\r\n      // Show notification to user about contact request\r\n    })\r\n\r\n    setSocket(newSocket)\r\n\r\n    return () => {\r\n      newSocket.close()\r\n    }\r\n  }, [])\r\n\r\n  // Send periodic location updates\r\n  useEffect(() => {\r\n    if (socket && isConnected) {\r\n      const locationInterval = setInterval(() => {\r\n        if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n              const locationData = {\r\n                location: {\r\n                  lat: position.coords.latitude,\r\n                  lng: position.coords.longitude,\r\n                  address: 'Live Location',\r\n                },\r\n                battery: Math.round(20 + Math.random() * 80), // Mock battery level\r\n                threatLevel: Math.random() > 0.8 ? 'Medium' : 'Low',\r\n              }\r\n\r\n              socket.emit('user-location-update', locationData)\r\n            },\r\n            (error) => {\r\n              // Silently handle location errors\r\n            }\r\n          )\r\n        }\r\n      }, 30000) // Update every 30 seconds\r\n\r\n      return () => clearInterval(locationInterval)\r\n    }\r\n  }, [socket, isConnected])\r\n\r\n  const sendEmergencyAlert = (alertData) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('emergency-alert', {\r\n        type: alertData.emergencyType || 'general',\r\n        message: alertData.description || 'Emergency assistance needed',\r\n        location: alertData.location,\r\n        severity: 'high',\r\n      })\r\n    }\r\n  }\r\n\r\n  const updateUserStatus = (status) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('user-status-update', { status })\r\n    }\r\n  }\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    sendEmergencyAlert,\r\n    updateUserStatus,\r\n  }\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>{children}</SocketContext.Provider>\r\n  )\r\n}\r\n\r\nexport default SocketContext\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}