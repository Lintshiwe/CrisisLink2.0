{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ntoam\\\\Desktop\\\\Projects\\\\CrisisLink2.0\\\\frontend\\\\src\\\\contexts\\\\WeatherContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherContext = /*#__PURE__*/createContext();\nexport const useWeather = () => {\n  _s();\n  const context = useContext(WeatherContext);\n  if (!context) {\n    throw new Error('useWeather must be used within a WeatherProvider');\n  }\n  return context;\n};\n_s(useWeather, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WeatherProvider = ({\n  children\n}) => {\n  _s2();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const getWeatherByLocation = async (latitude, longitude) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Mock weather data for now\n      const mockWeather = {\n        temperature: 22,\n        condition: 'Partly Cloudy',\n        humidity: 65,\n        windSpeed: 15,\n        location: 'Johannesburg, SA',\n        alerts: []\n      };\n      setWeather(mockWeather);\n      setLoading(false);\n      return mockWeather;\n    } catch (err) {\n      const errorMessage = 'Failed to fetch weather data';\n      setError(errorMessage);\n      setLoading(false);\n      throw new Error(errorMessage);\n    }\n  };\n  const value = {\n    weather,\n    loading,\n    error,\n    getWeatherByLocation\n  };\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s2(WeatherProvider, \"9Wlma1IF1k6KD1SpIyg4lCdfsHY=\");\n_c = WeatherProvider;\nexport default WeatherContext;\nvar _c;\n$RefreshReg$(_c, \"WeatherProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","WeatherContext","useWeather","_s","context","Error","WeatherProvider","children","_s2","weather","setWeather","loading","setLoading","error","setError","getWeatherByLocation","latitude","longitude","mockWeather","temperature","condition","humidity","windSpeed","location","alerts","err","errorMessage","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ntoam/Desktop/Projects/CrisisLink2.0/frontend/src/contexts/WeatherContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react'\r\n\r\nconst WeatherContext = createContext()\r\n\r\nexport const useWeather = () => {\r\n  const context = useContext(WeatherContext)\r\n  if (!context) {\r\n    throw new Error('useWeather must be used within a WeatherProvider')\r\n  }\r\n  return context\r\n}\r\n\r\nexport const WeatherProvider = ({ children }) => {\r\n  const [weather, setWeather] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const getWeatherByLocation = async (latitude, longitude) => {\r\n    setLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      // Mock weather data for now\r\n      const mockWeather = {\r\n        temperature: 22,\r\n        condition: 'Partly Cloudy',\r\n        humidity: 65,\r\n        windSpeed: 15,\r\n        location: 'Johannesburg, SA',\r\n        alerts: [],\r\n      }\r\n\r\n      setWeather(mockWeather)\r\n      setLoading(false)\r\n      return mockWeather\r\n    } catch (err) {\r\n      const errorMessage = 'Failed to fetch weather data'\r\n      setError(errorMessage)\r\n      setLoading(false)\r\n      throw new Error(errorMessage)\r\n    }\r\n  }\r\n\r\n  const value = {\r\n    weather,\r\n    loading,\r\n    error,\r\n    getWeatherByLocation,\r\n  }\r\n\r\n  return (\r\n    <WeatherContext.Provider value={value}>{children}</WeatherContext.Provider>\r\n  )\r\n}\r\n\r\nexport default WeatherContext\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMM,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGP,UAAU,CAACI,cAAc,CAAC;EAC1C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;AAAAD,EAAA,CANYD,UAAU;AAQvB,OAAO,MAAMI,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMiB,oBAAoB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;IAC1DL,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMI,WAAW,GAAG;QAClBC,WAAW,EAAE,EAAE;QACfC,SAAS,EAAE,eAAe;QAC1BC,QAAQ,EAAE,EAAE;QACZC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE,kBAAkB;QAC5BC,MAAM,EAAE;MACV,CAAC;MAEDd,UAAU,CAACQ,WAAW,CAAC;MACvBN,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOM,WAAW;IACpB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAG,8BAA8B;MACnDZ,QAAQ,CAACY,YAAY,CAAC;MACtBd,UAAU,CAAC,KAAK,CAAC;MACjB,MAAM,IAAIP,KAAK,CAACqB,YAAY,CAAC;IAC/B;EACF,CAAC;EAED,MAAMC,KAAK,GAAG;IACZlB,OAAO;IACPE,OAAO;IACPE,KAAK;IACLE;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,cAAc,CAAC2B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,EAAEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA0B,CAAC;AAE/E,CAAC;AAAAxB,GAAA,CAzCYF,eAAe;AAAA2B,EAAA,GAAf3B,eAAe;AA2C5B,eAAeL,cAAc;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}